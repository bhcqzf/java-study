<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--声明，注册springmvc的核心对象DispatherServlet
        需要在tomcat服务启动后，创建DispatherServlet对象的实力
        为什么要创建DispatherServlet对象呢？
        因为DispatherServlet在他的创建过程中，会同时创建springmvc容器对象
        读取springmvc的配置文件，把这个配置文件的对象都创建号，当用户发起
        请求时就可以使用对象了

        servlet初始化会执行init()方法，DispatherServlet在init中
        //创建容器，读取配置文件
        WebApplicationContext ctx = new ClassPathXmlApplicationContext("spring.xml");
        //把容器对象放入到servletContext中
        getServletContext().setAttribute(key,ctx);



        启动tomcat报错，读取文件/WEB-INF/springmvc-servlet.xml 报错，配置文件名字与servelet名字有关
        一般自定义位置
    -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--自定义springmvc的配置文件位置-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--在tomcat启动后，创建servlet对象
            load-on-startup :表示tomcat启动后创建对象的顺序，数值越小，tomcat创建对象的时间越早，大于等于0的整数
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <!--
            使用框架的时候url-pattern可以使用两种值
            1、使用拓展名方式，语法 *.xxx,  xxx是自定义拓展名，常用的方式 *.do *.action *.mvc
            http://localhost:8080/myweb/some.do
            http://localhost:8080/myweb/other.do

            2、使用斜杠“/”
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>




</web-app>