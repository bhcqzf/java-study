<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--把数据库的配置文件，卸载一个独立的文件，编译修改数据库的配置文件内容
    spring知道jdbc.properties文件的位置
    -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--声明数据源DateSOurce，作用是链接数据库的-->
    <!--使用属性配置文件中的数据，语法${key}-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.uesrname}" />
        <property name="password" value="${jdbc.passwd}" />
        <!--最大连接数-->
        <property name="maxActive" value="${jdbc.max}" />
    </bean>

    <!--声明mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessioFactory的-->
    <bean id="sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean" >
<!--        set注入，把数据库链接池给了datasource属性-->
        <property name="dataSource" ref="myDataSource" />
        <!--mybatis主配置文件的位置
        configlocation属性是Resource类型的，读取配置文件
        它的赋值，使用value，指定文件的路径，使用classpath：表示文件的位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml" />

    </bean>

    <!--创建dao对象，使用sqlSession的getMapper（StudentDao.class）
        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象
    -->
    <bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sqlSessionFactory的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!--指定包名，包名是dao接口所在的包名
        MapperScannerConfigurer会扫描包中的所有接口，包每个接口都执行
        创建好的dao对象放入到spring的容器中的 dao对象的默认名称是 接口名的首字母小写
        -->
        <property name="basePackage" value="cn.bigbaic.dao"/>
    </bean>

    <!--声明service-->
    <bean id="saleService" class = "cn.bigbaic.service.impl.SaleServiceImpl" >
         <property name="saleDao" ref="saleDao" />
    </bean>

    <bean id="goodsService" class = "cn.bigbaic.service.impl.GoodsServiceImpl" >
        <property name="goodsDao" ref="goodsDao" />
    </bean>

    <bean id = "buyService" class = "cn.bigbaic.service.impl.BuyServiceImpl" >
        <property name="saleDao" ref = "saleDao" />
        <property name="goodsDao" ref = "goodsDao" />
    </bean>
    <!--使用spring的事务处理-->
    <!--声明事务管理器-->
    <bean id="transactionManager" class = 'org.springframework.jdbc.datasource.DataSourceTransactionManager' >
        <!--链接数据库,指定数据源-->
        <property name="dataSource" ref = "myDataSource" />
    </bean>
    <!--2、声明业务方法它的事务属性（隔离级别，传播行为，超时时间）
        id:自定义名称，表示<tx:advice>和</tx:advice>质检的配置内容的

    -->
    <tx:advice id = "myAdvice" transaction-manager="transactionManager" >
        <!--tx:attributes表示配置事务属性-->
        <tx:attributes>
            <!--tx:method：给具体的方法配置事务属性，method可以有多个，分别给不同方法设置事务属性
                name：方法名称 1）完成的方法名称，不带有包和类
                            2）方法可以使用 通配符，* 表示任意字符
                 propagation: 传播行为，枚举值
                 isolation: 隔离级别
                 rollback-for ：你指定的异常雷鸣，全限定类名，发生异常一定回滚
            -->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                        rollback-for="cn.bigbaic.Utils.EnougthException"/>
            <tx:method name="add*" propagation="REQUIRES_NEW" />
            <!--添加方法-->
            <tx:method name="remove"  />
            <!--删除方法-->
            <tx:method name="modify"  />
            <!--查询方法-->
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />

        </tx:attributes>
    </tx:advice>
    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中类，要使用事务
            id:切入点表达式的名称，唯一值
            expression:切入点表达式，指定那些类要使用事务，aspectj会创建代理对象


        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器：关联advice和pointcut
        advice-ref：通知，上面tx:advice里的配置
        pointcut-ref: 切入点表达式的id

        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt" />
    </aop:config>


</beans>